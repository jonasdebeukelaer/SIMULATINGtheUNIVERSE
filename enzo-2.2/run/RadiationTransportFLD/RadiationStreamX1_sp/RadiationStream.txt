Streaming Radiating Test
[Free-streaming radiation]


In this problem we couple E and e together in a test where we examine
the propagation of a planar radiation wave through a transparent
medium.  Because the standard diffusion equation is parabolic, the
associated signal speed of the diffusion variable is formally
infinite.  However in reality radiation fronts propagate at speeds
bounded by the speed of light in vacuum, so this test serves to
examine the role of the flux-limiter in our FLD equation.  Radiation
is assumed to propagate along a user-specified axis of our
computational mesh; a Dirichlet boundary condition is imposed on the
left boundary specifying an incident radiation energy density of 1.0
erg cm^{-3}.  Physically, the expectation is that with a sufficiently
small (but nonzero, due to numerical constraints) opacity, a sharp
radiation front will move through the domain at the speed of light.
The Planck and Energy mean opacities are assigned a constant value
of 1e-6 cm^{-1}, ensuring an essentially transparent medium.  The
spatially uniform initial value of the radiation energy density is
1e-10 erg cm^{-3}. 

The computational mesh has a domain length of 1.0 cm along the
propagation direction of the light wave.  We have run the problem for
33.333 picoseconds, which is the light-crossing time for this
length. 


In the computed solutions, the quantity of interest is the location of
the planar radiation front as it propagates in time through the
domain.  In each of the 10 outputs, the front should have propagated
1/10 of the way through the domain.  In the analysis routines
rstream3d_makeplots.py and rstream1d_makeplots.py, we overlay the
plots of these profiles as they propagate through the domain.


3D Propagation, X-direction, Left to Right, Test files:
- implicit solver: RadiationStreamX0.enzo, RadiationStreamX0.gfld
- split solver: RadiationStreamX0_sp.enzo, RadiationStreamX0_sp.gfld
- analysis: rstream3d_makeplots.py; requires matplotlib and h5py

3D Propagation, Y-direction, Right to Left, Test files:
- implicit solver: RadiationStreamY1.enzo, RadiationStreamY1.gfld
- split solver: RadiationStreamY1_sp.enzo, RadiationStreamY1_sp.gfld
- analysis: rstream3d_makeplots.py; requires matplotlib and h5py

1D Propagation, Left to Right, Test files:
- implicit solver: RadiationStream1D.enzo, RadiationStream1D.gfld
- split solver: RadiationStream1D_sp.enzo, RadiationStream1D_sp.gfld
- analysis: rstream1d_makeplots.py; requires matplotlib and h5py


Problem-specific Input Parameters:
- RadStreamDim -- dimension for streaming problem (0,1,2)
- RadStreamDir -- direction for streaming radiation (0 is left->right,
  1 is right->left)


References:

D.R. Reynolds, J.C. Hayes, P. Paschos and M.L. Norman,
"Self-consistent solution of cosmological radiation-hydrodynamics and
chemical ionization," J. Comp. Phys., 228: 6833-6854, 2009.
