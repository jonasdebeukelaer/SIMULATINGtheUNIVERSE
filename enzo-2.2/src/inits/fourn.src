!=======================================================================
!////////////////////////  SUBROUTINE FOURN  \\\\\\\\\\\\\\\\\\\\\\\\\\\

        subroutine fourn(data, nn, ndim, isign)

!  PERFORM A COMPLEX-COMPLEX N-DIMENSIONAL FFT
!
!   written by: Numerical Recipes
!   data:
!   modified1:
!
!  PURPOSE:  Replaces DATA by its NDIM-dimensional discrete Fourier transform
!      if ISIGN is 1.  NN is an integer array of length NDIM, containing
!      the lengths of each dimension (number of complex values), which
!      MUST all be powers of 2.  DATA is a real array of length twice the
!      product of these lengths, in which the data are stored as in a
!      multidimensional complex FORTRAN array.  If ISIGN in input as -1,
!      DATA is replaced by its inverse transform times the product of the
!      lengths of all dimensions.
!
!  INPUTS:
!    nn    - an integer array of length NDIM, containing the lengths of 
!          each dimension
!    data  - data to be transformed
!    ndim  - number of dimensions
!    isign - +1 is forward, -1 is inverse
!
!  OUTPUTS:
!    data  - transformed array

      implicit none

!  Parameters

      real, parameter :: twopi = 6.2831853071796e0

!  Arguments

      real ::   data(*)
      integer :: isign, ndim, nn(ndim)

!  External functions

      integer :: power_of_2

!  Locals

      integer :: i1, i2, i3, i2rev, i3rev, ibit, idim,
     &           ifp1, ifp2, ip1, ip2, ip3, k2, n, nprev, nrem, ntot
      integer :: ibad
      real :: tempi, tempr

!     double precision twopi, theta, wr, wi, wpr, wpi, wtemp

      real :: theta, wr, wi, wpr, wpi, wtemp


!     Compute total number of complex values

      ibad = 0

      do idim = 1, ndim
      if( power_of_2(nn(idim)) .ne. 0 ) then
        write(*,'("Index ",i1," is not a power of 2")') idim
        ibad = 1
      end if
      end do

      if( ibad .ne. 0 ) stop 'bad FFT'

      ntot = 1
      do idim=1, ndim
         ntot = ntot*nn(idim)
      enddo
      nprev=1

!     Main loop over the dimensions.

      do idim=1, ndim
         n     = nn(idim)
         nrem  = ntot/(n*nprev)
         ip1   = 2*nprev
         ip2   = ip1*n
         ip3   = ip2*nrem
         i2rev = 1

!        This is the bit reversal section of the routine.

         do i2=1,ip2,ip1
            if (i2.lt.i2rev) then
               do i1=i2, i2+ip1-2, 2
                  do i3=i1, ip3, ip2
                     i3rev = i2rev + i3 - i2
                     tempr = data(i3  )
                     tempi = data(i3+1)
                     data(i3     ) = data(i3rev  )
                     data(i3+1   ) = data(i3rev+1)
                     data(i3rev  ) = tempr
                     data(i3rev+1) = tempi
                  enddo
               enddo
            endif

            ibit = ip2/2
 1          if ((ibit.ge.ip1) .and. (i2rev.gt.ibit)) then
               i2rev = i2rev-ibit
               ibit  = ibit/2
               go to 1
            end if
            i2rev = i2rev + ibit
         enddo

!        Here begins the Danielson-Lanczos section of the routine.

          ifp1 = ip1
 2        if (ifp1 .lt. ip2) then
             ifp2 = 2*ifp1

!         Initialize for the trigonometric recurrence.

             theta = isign*twopi/(ifp2/ip1)
             wpr   = -2.0*sin(0.5*theta)**2
             wpi   = sin(theta)
             wr    = 1.0
             wi    = 0.0
             do i3 = 1, ifp1, ip1
                do i1 = i3, i3+ip1-2, 2
                   do i2 = i1, ip3, ifp2

!                     Danielson-Lanczos formula.

                      k2 = i2 + ifp1
                      tempr = wr * data(k2  ) - wi*data(k2+1)
                      tempi = wr * data(k2+1) + wi*data(k2  )
                      data(k2  ) = data(i2  ) - tempr
                      data(k2+1) = data(i2+1) - tempi
                      data(i2  ) = data(i2  ) + tempr
                      data(i2+1) = data(i2+1) + tempi
                   enddo
                enddo

!              Trigonometric recurrence.

                wtemp = wr
                wr    = wr*wpr - wi*wpi    + wr
                wi    = wi*wpr + wtemp*wpi + wi
             enddo

             ifp1 = ifp2
             go to 2
          end if
          nprev = n*nprev

       enddo

       return
       end
