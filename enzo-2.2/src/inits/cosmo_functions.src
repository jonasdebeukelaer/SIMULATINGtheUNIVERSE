!=======================================================================
! Set the current radiation density (incl. massless neutrinos) for h=1
!define OMEGA0_RAD 4.22e-5
#define OMEGA0_RAD 0.0
!=======================================================================


!=======================================================================
!//////////////////////  FUNCTION COMPUTE_TIME  \\\\\\\\\\\\\\\\\\\\\\\\

      real function calc_time(aye_temp)

!  COMPUTES THE TIME GIVEN THE EXPANSION FACTOR
!
!  written by: Greg Bryan
!  date:       February, 1992
!  modified:   Robert Harkness
!  date:       November, 2003
!
!  PURPOSE:  
!
!  INPUTS:
!
!  OUTPUTS:

      implicit none

#include "cosmo.h"

!     Argument

      real :: aye_temp

!     Locals

      real :: time_temp

!     Externals

      real :: dtda, midpnt
      external :: dtda, midpnt


      call qromo(dtda, 0.0, aye_temp, time_temp, midpnt)

      calc_time = time_temp

      return
      end


!=======================================================================
!/////////////////////////  FUNCTION DADT  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\

      real function calc_ayed(aye_temp)

!  modified:   Robert Harkness
!  date:       November, 2003

      implicit none

!     Argument

      real :: aye_temp

!     External function

      real :: dtda


      calc_ayed = 1.0/dtda(aye_temp)

      return
      end


!=======================================================================
!////////////////////////  FUNCTION D2A/DT2  \\\\\\\\\\\\\\\\\\\\\\\\\\\

      real function calc_ayedd(aye_temp)

!  modified:   Robert Harkness
!  date:       November, 2003

      implicit none

#include "cosmo.h"

!     Argument

      real :: aye_temp

!     Locals

      real :: omega0_rad, omega0_mrad

      omega0_rad = OMEGA0_RAD*hub**(-2)
      omega0_mrad = omega0 - omega0_rad

      calc_ayedd = aye_temp*(lam0 - 0.5*omega0_mrad/(aye_temp*uaye)**3
     &                            -     omega0_rad /(aye_temp*uaye)**4)

!     Convert to code units (the factors of H_0 have already been cancelled)

     &       /(sqrt(3.0/2.0*omega0)*(1.0+zri)**1.5)**2

      return
      end


!=======================================================================
!/////////////////////////  FUNCTION DTDA  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\

      real function dtda(aye_temp)

!  COMPUTES THE VALUE OF DT/DA, GIVEN A

!  written by: Greg Bryan
!  date:       February, 1992
!  modified:   Robert Harkness
!  date:       November, 2003

      implicit none

#include "cosmo.h"

!     Argument

      real :: aye_temp

!     Locals

      real :: at2, omega0_rad, omega0_mrad


!     We include the (small) effect of radiation (Peebles 6.80)

      omega0_rad = OMEGA0_RAD*hub**(-2)
      omega0_mrad = omega0 - omega0_rad

!     Convert aye from code units

      at2 = aye_temp*uaye

!     Compute dt/da (Peebles1993, p. 312)

      dtda = 1.0/sqrt(omega0_mrad/at2 + omega0_rad/at2**2 +
     &                lam0*at2**2 + 1.0 - lam0 - omega0)

!     Convert to code units (the factors of H_0 have already been cancelled)

     &       *sqrt(3.0/2.0*omega0)*(1.0+zri)**1.5 * uaye

      return
      end


!=======================================================================
!////////////////////////  FUNCTION CALC_AYE  \\\\\\\\\\\\\\\\\\\\\\\\\\

      real function calc_aye(time_temp)

!  COMPUTES THE EXPANSION FACTOR GIVEN THE TIME
!
!  written by: Greg Bryan
!  date:       February, 1992
!  modified:   Robert Harkness
!  date:       November, 2003

      implicit none

#include "cosmo.h"

!     Argument

      real :: time_temp

!     Locals

      real :: aye_temp, aye_old, calc_time, dtda, tfinal, tfromfinal
      integer :: i

!     Parameters

      integer, parameter :: niter = 10
      real, parameter :: tolerance = 1.0e-5


!     Make an initial guess based on Taylor expansion (i.e. use q0)

      tfinal = calc_time(1.0+zri)
      tfromfinal = sqrt(2.0/3.0/omega0)*(1.0+zri)**(-1.5) * 
     &             (tfinal - time_temp)
      aye_temp = (1.0+zri)*(1 - tfromfinal - 
     &                 0.5*(0.5*omega0 - lam0)*tfromfinal**2)

!     Do a Newton-Raphson iteration

      do i = 1, niter
         aye_old = aye_temp
         aye_temp = aye_old + 1.0/dtda(aye_old) *
     &                        (time_temp - calc_time(aye_old))
         if (abs(aye_old-aye_temp)/aye_temp .lt. tolerance) goto 100
      enddo

      write(0,*) 'NR in calc_aye failed.'
      stop

!     Done

 100  continue

      calc_aye = aye_temp

      return
      end


!=======================================================================
!/////////////////////////  FUNCTION CALC_F  \\\\\\\\\\\\\\\\\\\\\\\\\\\

      real function calc_f(aye_temp)

!  COMPUTES THE FUNCTION D LOG (DELTA_PLUS) / D LOG (AYE)
!
!  written by: Greg Bryan
!  date:       February, 1995
!  modified:   Robert Harkness
!  date:       November, 2003

      implicit none

#include "cosmo.h"

!     Argument

      real :: aye_temp

!     Locals

      real :: ayed, ayedd, sum, at2

      real :: fhelper, calc_ayed, calc_ayedd, midpnt

      external :: fhelper, midpnt


!     We calculate f(z) through PEEBLES93, eq 13.81:
!
!     f = ayedd*aye/ayed^2 - 1 + 1 / (a^2 E^3 G)
!
!        where G = int(z to infifinty) (1+z)/E(z)^3 dz
!                = int(0 to a) da/(E(a) * a)^3
!              E = da/dt / H_0 

!     Compute G (using the usual a convention)

      at2 = aye_temp*uaye

      call qromo(fhelper, 0.0, at2, sum, midpnt)

      ayed = calc_ayed(aye_temp)
      ayedd = calc_ayedd(aye_temp)

!     Note that f is dimensionless, specifically all the unusual aye
!     convention (a=1 at z=zri) cancels for the first term.  The third
!     term is computed entirely in the usual convention.

      calc_f = ayedd*aye_temp/ayed**2 - 1.0 + at2*fhelper(at2)/sum

      return
      end


!=======================================================================
!/////////////////////////  FUNCTION FFUNC  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\

      real function fhelper(at2)

!  modified:   Robert Harkness
!  date:       November, 2003

      implicit none

#include "cosmo.h"

!     returns the function 1/(a * E)^3  
!       (where, here only, a is not aye, i.e. it obeys the usual convention
!        of a = 1 at z = 0)

!     Argument

      real :: at2

!     Locals

      real :: E, omega0_rad, omega0_mrad


      omega0_rad = OMEGA0_RAD*hub**(-2)
      omega0_mrad = omega0 - omega0_rad

      E = sqrt(omega0_mrad/at2**3 + (1.0 - omega0 - lam0)/at2**2 + 
     &         lam0 + omega0_rad/at2**4)

      fhelper = 1.0/(at2*E)**3

      return
      end


!=======================================================================
!///////////////////////  FUNCTION CALC_GROWTH  \\\\\\\\\\\\\\\\\\\\\\\\

      real function calc_growth(z1)

!  COMPUTES THE GROWTH FUNCTION D(z), NORMALIZED AT HIGH REDSHIFT
!
!  written by: Greg Bryan
!  date:       February, 1995
!  modified:   Robert Harkness
!  date:       November, 2003

!  PURPOSE:
!    Note: this function is _not_ normalized to D(z=0) = 1
!
!  INPUTS:
!    z      - redshift function is to be evaluated at
!    omega0 - matter density ratio at z=0
!    omega_lam - \Lambda/(3*H_0^2) at z=0
!
!  OUTPUTS:
!    calc_growth - linear growth, normalized to 1/(1+z) at z=infinity


      implicit none

#include "cosmo.h"

!     Argument

      real :: z1

!     Locals

      real :: a, sum, E

!     Externals

      real :: fhelper, midpnt
      external :: fhelper, midpnt


!     We calculate D(z) through PEEBLES93, eq 13.78:
!
!     D(z) = E(z) * G(z)
!
!        where G = 5*omega0/2 * int(z to infinity) (1+z)/E(z)^3 dz
!                = 5*omega0/2 * int(0 to a) da/(E(a) * a)^3
!              E = da/dt / H_0

!     Compute G, missing the prefactor

      a = 1.0/(1.0+z1)

      call qromo(fhelper, 1.0e-10, a, sum, midpnt)

      E = sqrt(omega0/a**3 + (1.0 - omega0 - lam0)/a**2 + lam0)

      calc_growth = 5.0*omega0/2.0 * sum * E

      return
      end


!=======================================================================
!/////////////////////  SUBROUTINE SET_COMMON  \\\\\\\\\\\\\\\\\\\\\\\\\

      subroutine set_common(lam0_in, omega0_in, zri_in, hub_in)

!  modified:   Robert Harkness
!  date:       November, 2003

      implicit none

#include "cosmo.h"

!     Arguments

      real :: lam0_in, omega0_in, zri_in, hub_in


      lam0   = lam0_in
      omega0 = omega0_in
      zri    = zri_in
      hub    = hub_in
      uaye   = 1.0/(1.0 + zri)

      return
      end
