!=======================================================================
!///////////////////////  SUBROUTINE PREFORT  \\\\\\\\\\\\\\\\\\\\\\\\\\

      subroutine prefort(buffer, tempbuffer, dim1, dim2, dim3,
     &                   rdim1, rdim2, rdim3, rank, isign)

!  PREPARES THE REAL/COMPLEX BUFFER FOR A CALL TO FORTRAN COMPLEX FFT

!     written by: Robert Harkness
!     date:       May, 2003

!  INPUTS:
!     buffer      - real or complex array to be transformed
!     tempbuffer  - temporary buffer of size 2*dim1*dim2*dim3
!     dim1,2,3    - dimension of transform
!     rdim1,2,3   - declared dimension of buffer
!     rank        - number of dimensions to be used in transform
!     isign       - direction of transform

!  OUTPUTS:
!     buffer      - transformed array

      implicit NONE

!  Arguments

      integer :: dim1, dim2, dim3, isign, rank, rdim1, rdim2, rdim3
      real    :: buffer(rdim1, rdim2, rdim3), 
     &           tempbuffer(2*dim1, dim2, dim3)

!  Locals

      integer :: i, i1, j, j1, k, k1, dims(3)
      real    :: factor


!     Error check


      write(0,'("Pre-Fortran FFT ",8i8)')
     & rdim1, rdim2, rdim3, dim1, dim2, dim3, rank, isign

      if (rdim1 .lt. dim1+2) then
         write (0,*) 'PREFORT: rdim1 < dim1+2:', rdim1, dim1+2
         stop
      endif

!     Copy dims into integer array for fourn

      dims(1) = dim1
      dims(2) = dim2
      dims(3) = dim3

!     1) Forward direction

      if (isign .eq. -1) then

!        Copy real data into complex temporary

         do k = 1, dim3
            do j = 1, dim2
               do i = 1, dim1
                  tempbuffer(i*2-1, j, k) = buffer(i, j, k)
                  tempbuffer(i*2  , j, k) = 0.0
               enddo
            enddo
         enddo

!        Carry out the transform


!        call nr_fftx(tempbuffer, rank, dim1, dim2, dim3, isign)
!        call nrot_fftx(tempbuffer, rank, dim1, dim2, dim3, isign)
!        call sing90_fftx(tempbuffer, rank, dim1, dim2, dim3, isign)
!        call sing66_fftx(tempbuffer, rank, dim1, dim2, dim3, isign)

         call fortfft(tempbuffer, rank, dim1, dim2, dim3, isign)


!        Copy unique part of complex temporary back to buffer.

         do k = 1, dim3
            do j = 1, dim2
               do i = 1, dim1+2
                  buffer(i, j, k) = tempbuffer(i, j, k)
               enddo
            enddo
         enddo

!     2) Inverse transform

      else

!        Recreate the other half of the complex data.

         do k = 1, dim3
            do j = 1, dim2

!              First copy the 1/2 that is already there.

               do i = 1, dim1+2
                  tempbuffer(i, j, k) = buffer(i, j, k)
               enddo

!              Use conjugate relations to make up other 1/2.

               k1 = dim3 + 2 - k
               if (k .eq. 1) k1 = 1
               j1 = dim2 + 2 - j
               if (j .eq. 1) j1 = 1

               do i = dim1/2+2, dim1
                  i1 = dim1 + 2 - i
                  tempbuffer(i*2-1, j, k) =   buffer(i1*2-1, j1, k1)
                  tempbuffer(i*2  , j, k) = - buffer(i1*2  , j1, k1)
               enddo

            enddo
         enddo

!        Perform transform


!        call nr_fftx(tempbuffer, rank, dim1, dim2, dim3, isign)
!        call nrot_fftx(tempbuffer, rank, dim1, dim2, dim3, isign)
!        call sing66_fftx(tempbuffer, rank, dim1, dim2, dim3, isign)
!        call sing90_fftx(tempbuffer, rank, dim1, dim2, dim3, isign)

         call fortfft(tempbuffer, rank, dim1, dim2, dim3, isign)


!        Copy real part of tempbuffer to buffer & scale.


!        factor = 1.0/real(dim1*dim2*dim3)

         do k = 1, dim3
            do j = 1, dim2
               do i = 1, dim1
                  buffer(i, j, k) = tempbuffer(i*2-1, j, k) ! *factor
               enddo
            enddo
         enddo

      endif

!     Done

      write(0,'("Exit Pre-Fortran")')

      return
      end
